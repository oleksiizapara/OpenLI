type User @model @auth(rules: [{ allow: owner, ownerField: "id" }]) {
  id: ID!
  username: String!
  name: String!
  familyName: String!
  readingMessages: [ReadingMessage]
    @connection(name: "ReadingMessages", keyField: "authorId")
  preogresses: [Progress]
    @connection(name: "Progresses", keyField: "authorId")
  createdAt: String
  updatedAt: String
}

type ReadingMessage
  @model
  @auth(rules: [{ allow: owner, ownerField: "authorId" }]) {
  id: ID!
  author: User @connection(name: "ReadingMessages", keyField: "authorId")
  authorId: String
  title: String!
  content: String!
  createdAt: String
  updatedAt: String
  access: ReadingMessageAccess
}

enum ReadingMessageAccess {
  PUBLIC
  PRIVATE
}

type Progress @model
  @auth(rules: [{ allow: owner, ownerField: "authorId" }]) {
  id: ID!
  author: User @connection(name: "Progresses", keyField: "authorId")
  authorId: String
  readingMessageHistories: [ReadingMessageHistory]
  readingMessageProgresses: [ReadingMessageProgress]
  isCalculated: Boolean!
  createdAt: String
  updatedAt: String
}

type ReadingMessageHistory {
  id: ID!
  ReadingMessage: ReadingMessage
  words: [Word]
  readingSpeed: Int!
  totalWords: Int!
  uniqueWords: [String]
  recognisedWords: [String]
  unRecognisedWords: [String]
  recognisedWordsPercent: Float!
  time: String
}

type Word {
  index: Int!
  word: String!
  time: String!
  isRegognised: Boolean!
}

type ReadingMessageProgress {
    id: ID!
    orderId: Int
    readingMessageId: ID!
    readingMessageTitle: String!
    readingMessageProgressUnits: [ReadingMessageProgressUnit]
    time: String!
}

type ReadingMessageProgressUnit {
  id: ID!
  readingMessageId: ID!
  time: String!
  recognisedWordsPercent: Float!
}
